import 'package:flutter/material.dart';
import 'package:breakpoint/routes/app_router.dart';
import 'package:breakpoint/presentation/widgets/space_card.dart'; // <-- reutilizamos SpaceCard
import 'package:provider/provider.dart';
import 'package:breakpoint/domain/repositories/reservation_repository.dart';

class ReservationsScreen extends StatelessWidget {
  const ReservationsScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final repo = context.read<ReservationRepository>();

    InputDecoration _searchDecoration() => InputDecoration(
      hintText: 'Reservas',
      prefixIcon: const Icon(Icons.search, size: 20),
      filled: true,
      fillColor: Colors.white,
      contentPadding: const EdgeInsets.symmetric(horizontal: 14, vertical: 12),
      enabledBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(24),
        borderSide: const BorderSide(color: Colors.black12),
      ),
      focusedBorder: OutlineInputBorder(
        borderRadius: BorderRadius.circular(24),
        borderSide: const BorderSide(color: Colors.black54, width: 1),
      ),
    );

    return Scaffold(
      // AppBar tipo Explore con buscador
      appBar: AppBar(
        title: TextField(decoration: _searchDecoration()),
        centerTitle: true,
        toolbarHeight: 64,
      ),

      body: FutureBuilder(
        future: repo.getUserReservations(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          final reservations = snapshot.data ?? [];
          if (reservations.isEmpty) {
            return const Center(child: Text('Aún no tienes reservas.'));
          }
          return ListView.separated(
            padding: const EdgeInsets.fromLTRB(12, 8, 12, 12),
            itemCount: reservations.length,
            separatorBuilder: (_, __) => const SizedBox(height: 16),
            itemBuilder: (context, i) {
              final r = reservations[i];
              final title = r.spaceTitle;
              final hour = '${r.formattedDate} · ${r.formattedTimeRange}';
              return SpaceCard(
                title: title,
                subtitle: '',
                rating: 0,
                priceCOP: null,
                metaLines: [
                  'Reserva: $hour',
                  'Total: ${r.totalAmount.toStringAsFixed(0)} ${r.currency}',
                ],
                rightTag: r.statusText,
                imageAspectRatio: 16 / 9,
                imageUrl: r.spaceImageUrl,
                onTap: () {},
              );
            },
          );
        },
      ),

      // Bottom bar con Reservations seleccionado
      bottomNavigationBar: NavigationBar(
        selectedIndex: 2,
        onDestinationSelected: (i) {
          if (i == 0) {
            Navigator.pushReplacementNamed(context, AppRouter.explore);
          } else if (i == 3) {
            Navigator.pushReplacementNamed(context, AppRouter.profile);
          }
        },
        destinations: const [
          NavigationDestination(icon: Icon(Icons.search), label: 'Explore'),
          NavigationDestination(icon: Icon(Icons.chat_bubble_outline), label: 'Rate'),
          NavigationDestination(icon: Icon(Icons.event_note_outlined), label: 'Reservations'),
          NavigationDestination(icon: Icon(Icons.person), label: 'Profile'),
        ],
      ),
    );
  }
}
