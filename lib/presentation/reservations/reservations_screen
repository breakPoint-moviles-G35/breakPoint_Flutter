import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:breakpoint/routes/app_router.dart';
import 'package:breakpoint/presentation/widgets/space_card.dart';
import 'package:breakpoint/domain/entities/reservation.dart';
import 'package:breakpoint/domain/repositories/reservation_repository.dart';

class ReservationsScreen extends StatefulWidget {
  const ReservationsScreen({super.key});

  @override
  State<ReservationsScreen> createState() => _ReservationsScreenState();
}

class _ReservationsScreenState extends State<ReservationsScreen> {
  bool isLoading = false;
  String? error;
  List<Reservation> reservations = [];
  String? currentUserId;

  @override
  void initState() {
    super.initState();
    _load();
  }

  Future<void> _load() async {
    try {
      setState(() {
        isLoading = true;
        error = null;
      });

      // Leer user_id desde SharedPreferences (si está guardado)
      try {
        final prefs = await SharedPreferences.getInstance();
        final raw = prefs.getString('auth_user');
        if (raw != null && raw.isNotEmpty) {
          final regex = RegExp(r'id[:=]\s*([\w-]+)');
          final m = regex.firstMatch(raw);
          if (m != null) currentUserId = m.group(1);
        }
      } catch (_) {}

      final repo = context.read<ReservationRepository>();
      final all = await repo.getUserReservations();
      final now = DateTime.now();
      reservations = all.where((r) {
        final activeWindow = r.slotStart.isBefore(now) && r.slotEnd.isAfter(now);
        return r.status == ReservationStatus.confirmed && activeWindow;
      }).toList()
        ..sort((a, b) => b.slotStart.compareTo(a.slotStart));
    } catch (e) {
      error = 'Error al cargar reservas: $e';
    } finally {
      if (mounted) setState(() => isLoading = false);
    }
  }

  InputDecoration _searchDecoration() => InputDecoration(
        hintText: 'Reservas activas',
        prefixIcon: const Icon(Icons.search, size: 20),
        filled: true,
        fillColor: Colors.white,
        contentPadding:
            const EdgeInsets.symmetric(horizontal: 14, vertical: 12),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(24),
          borderSide: const BorderSide(color: Colors.black12),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(24),
          borderSide: const BorderSide(color: Colors.black54, width: 1),
        ),
      );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: TextField(decoration: _searchDecoration()),
        centerTitle: true,
        toolbarHeight: 64,
      ),
      body: RefreshIndicator(
        onRefresh: _load,
        child: Builder(builder: (context) {
          if (isLoading) return const Center(child: CircularProgressIndicator());
          if (error != null) return Center(child: Text(error!));
          if (reservations.isEmpty) return const Center(child: Text('No tienes reservas activas.'));

          return ListView.separated(
            padding: const EdgeInsets.fromLTRB(12, 8, 12, 12),
            itemCount: reservations.length,
            separatorBuilder: (_, __) => const SizedBox(height: 16),
            itemBuilder: (context, i) {
              final r = reservations[i];
              return SpaceCard(
                title: r.spaceTitle,
                subtitle: '',
                rating: 0,
                priceCOP: null,
                metaLines: [
                  _formatSlot(r),
                  'Total: ${r.currency} ${r.totalAmount.toStringAsFixed(0)}',
                ],
                rightTag: r.statusText,
                imageAspectRatio: 16 / 9,
                imageUrl: r.spaceImageUrl,
                onTap: () {},
              );
            },
          );
        }),
      ),
      bottomNavigationBar: NavigationBar(
        selectedIndex: 2,
        onDestinationSelected: (i) {
          if (i == 0) {
            Navigator.pushReplacementNamed(context, AppRouter.explore);
          } else if (i == 1) {
            Navigator.pushReplacementNamed(context, AppRouter.rate);
          } else if (i == 3) {
            Navigator.pushReplacementNamed(context, AppRouter.profile);
          }
        },
        destinations: const [
          NavigationDestination(icon: Icon(Icons.search), label: 'Explore'),
          NavigationDestination(icon: Icon(Icons.chat_bubble_outline), label: 'Rate'),
          NavigationDestination(icon: Icon(Icons.event_note_outlined), label: 'Reservations'),
          NavigationDestination(icon: Icon(Icons.person), label: 'Profile'),
        ],
      ),
    );
  }

  String _formatSlot(Reservation r) {
    String two(int n) => n.toString().padLeft(2, '0');
    final s = r.slotStart;
    final e = r.slotEnd;
    final day = '${two(s.day)}/${two(s.month)}/${s.year}';
    final t = '${two(s.hour)}:${two(s.minute)} - ${two(e.hour)}:${two(e.minute)}';
    return 'Horas reservadas: $t · $day';
  }
}
