import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import 'package:breakpoint/routes/app_router.dart';
import 'package:breakpoint/presentation/widgets/space_card.dart';
import 'package:breakpoint/presentation/details/space_detail_screen.dart';
import 'package:breakpoint/presentation/explore/viewmodel/explore_viewmodel.dart';

class ExploreScreen extends StatelessWidget {
  const ExploreScreen({super.key});

  Future<void> _openFilters(BuildContext context, ExploreViewModel vm) async {
    final picked = await Navigator.pushNamed(context, AppRouter.filters) as DateTimeRange?;
    if (picked != null) {
      vm.setStartEndFromRange(picked); // <<<<<< cambia aquí
    }
  }

  @override
  Widget build(BuildContext context) {
    final vm = context.watch<ExploreViewModel>();

    return Scaffold(
      appBar: AppBar(
        title: Container(
          height: 40,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(24),
            border: Border.all(color: Colors.black12),
          ),
          child: Row(
            children: [
              const SizedBox(width: 10),
              const Icon(Icons.search, size: 20),
              const SizedBox(width: 8),
              Expanded(
                child: TextField(
                  controller: vm.searchCtrl,
                  onChanged: vm.onQueryChanged,
                  decoration: const InputDecoration(
                    hintText: 'Buscar...',
                    border: InputBorder.none,
                  ),
                ),
              ),
              IconButton(
                onPressed: null,
                icon: const Icon(Icons.qr_code_scanner, size: 20),
                tooltip: 'Scan',
              ),
            ],
          ),
        ),
        actions: [
          IconButton(
            onPressed: () => _openFilters(context, vm),
            icon: const Icon(Icons.tune),
            tooltip: 'Filters',
          ),
          const SizedBox(width: 4),
        ],
        centerTitle: true,
      ),

      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 8, 16, 0),
            child: Row(
              children: [
                OutlinedButton(
                  style: OutlinedButton.styleFrom(shape: const StadiumBorder()),
                  onPressed: vm.toggleSort,
                  child: const Text('Sort by price'),
                ),
                const SizedBox(width: 8),
                if (vm.hasRange)
                  InputChip(
                    label: Text('${vm.fmtIsoDay(vm.start!)} – ${vm.fmtIsoDay(vm.end!)}'),
                    onDeleted: () => vm.setStartEndFromRange(null),
                  ),
              ],
            ),
          ),
          const SizedBox(height: 8),

          Expanded(
            child: Builder(
              builder: (_) {
                if (vm.isLoading) return const Center(child: CircularProgressIndicator());
                if (vm.error != null) return Center(child: Text(vm.error!));
                if (vm.spaces.isEmpty) return const Center(child: Text('No hay espacios'));

                return ListView.separated(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                  itemCount: vm.spaces.length,
                  separatorBuilder: (_, __) => const SizedBox(height: 16),
                  itemBuilder: (context, i) {
                    final s = vm.spaces[i];
                    return SpaceCard(
                      title: s.title,
                      subtitle: s.subtitle,
                      rating: s.rating,
                      priceCOP: s.price,
                      imageUrl: s.imageUrl,
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (_) => SpaceDetailScreen(
                              title: s.title,
                              subtitle: s.subtitle,
                              rating: s.rating,
                              price: s.price,
                            ),
                          ),
                        );
                      },
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),

      bottomNavigationBar: NavigationBar(
        selectedIndex: 0,
        onDestinationSelected: (i) {
          if (i == 2) Navigator.pushReplacementNamed(context, AppRouter.reservations);
        },
        destinations: const [
          NavigationDestination(icon: Icon(Icons.search), label: 'Explore'),
          NavigationDestination(icon: Icon(Icons.chat_bubble_outline), label: 'Rate'),
          NavigationDestination(icon: Icon(Icons.event_note_outlined), label: 'Reservations'),
        ],
      ),
    );
  }
}
