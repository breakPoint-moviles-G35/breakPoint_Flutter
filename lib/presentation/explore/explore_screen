import 'package:flutter/material.dart'; 
import '../widgets/space_card'; 
import '../filters/date_filter_screen.dart';
import '../../routes/app_router';

class ExploreScreen extends StatefulWidget {
  const ExploreScreen({super.key});
  @override
  State<ExploreScreen> createState() => _ExploreScreenState();
}

class _ExploreScreenState extends State<ExploreScreen> {
  final TextEditingController _searchCtrl = TextEditingController();
  bool _sortAsc = true;
  DateTimeRange? _range;

  final _spaces = [
    {'title': 'Nap Room SD-2','subtitle': 'Quiet • 6 min walk • Wi-Fi','rating': 4.7,'price': 15000.0, 'image': 'https://a0.muscache.com/im/pictures/hosting/Hosting-1429726908347803636/original/63f89e42-c88e-4ff9-8cdd-24672211c05d.jpeg?im_w=1200',},
    {'title': 'Private Studio 3','subtitle': 'Secure access • 1–2 ppl','rating': 4.8,'price': 20000.0, 'image': 'https://a0.muscache.com/im/pictures/miso/Hosting-1451104447524375716/original/c4f1abe9-49cf-468b-bbfe-841604a22a84.jpeg?im_w=1200',},
    {'title': 'Study room E-104','subtitle': 'Desk • Chair • Reliable Wi-Fi','rating': 4.6,'price': 17000.0, 'image': 'https://a0.muscache.com/im/pictures/19eadf18-6546-4f11-a9dc-cdd0ebd0c6b6.jpg?im_w=1200',},
  ];

  List<Map<String, dynamic>> get _filtered {
    final q = _searchCtrl.text.trim().toLowerCase();
    final list = _spaces.where((s) => s['title'].toString().toLowerCase().contains(q)).toList();
    list.sort((a, b) => _sortAsc
        ? (a['price'] as double).compareTo(b['price'] as double)
        : (b['price'] as double).compareTo(a['price'] as double));
    return list;
  }

  String _fmt(DateTime d) =>
      '${d.year}-${d.month.toString().padLeft(2, '0')}-${d.day.toString().padLeft(2, '0')}';

  Future<void> _openFilters() async {
  final picked = await Navigator.pushNamed(context, AppRouter.filters)
      as DateTimeRange?; // 👈 casteo del resultado
  if (picked != null && mounted) {
    setState(() => _range = picked);
  }
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // AppBar con buscador y botón de filtros (derecha)
      appBar: AppBar(
        title: Container(
          height: 40,
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(24),
            border: Border.all(color: Colors.black12),
          ),
          child: Row(
            children: [
              const SizedBox(width: 10),
              const Icon(Icons.search, size: 20),
              const SizedBox(width: 8),
              Expanded(
                child: TextField(
                  controller: _searchCtrl,
                  onChanged: (_) => setState(() {}),
                  decoration: const InputDecoration(
                    hintText: 'Buscar...',
                    border: InputBorder.none,
                  ),
                ),
              ),
              IconButton(
                onPressed: null, // QR sin acción (o elimínalo)
                icon: const Icon(Icons.qr_code_scanner, size: 20),
                tooltip: 'Scan',
              ),
            ],
          ),
        ),
        actions: [
          IconButton(
            onPressed: _openFilters, // ← abre la pantalla de filtros
            icon: const Icon(Icons.tune),
            tooltip: 'Filters',
          ),
          const SizedBox(width: 4),
        ],
        centerTitle: true,
      ),

      body: Column(
        children: [
          // Botón sort + chip del rango seleccionado
          Padding(
            padding: const EdgeInsets.fromLTRB(16, 8, 16, 0),
            child: Row(
              children: [
                OutlinedButton(
                  style: OutlinedButton.styleFrom(shape: const StadiumBorder()),
                  onPressed: () => setState(() => _sortAsc = !_sortAsc),
                  child: const Text('Sort by price'),
                ),
                const SizedBox(width: 8),
                if (_range != null)
                  InputChip(
                    label: Text('${_fmt(_range!.start)} – ${_fmt(_range!.end)}'),
                    onDeleted: () => setState(() => _range = null),
                  ),
              ],
            ),
          ),
          const SizedBox(height: 8),

          // Lista de cards
          Expanded(
            child: ListView.separated(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
              itemCount: _filtered.length,
              separatorBuilder: (_, __) => const SizedBox(height: 16),
              itemBuilder: (context, i) {
                final s = _filtered[i];
                return SpaceCard(
                  title: s['title'] as String,
                  subtitle: s['subtitle'] as String,
                  rating: (s['rating'] as double),
                  priceCOP: (s['price'] as double),
                  onTap: () {},
                );
              },
            ),
          ),
        ],
      ),

      bottomNavigationBar: NavigationBar(
        selectedIndex: 0,
        onDestinationSelected: (i) {
        if (i == 2) {
          Navigator.pushReplacementNamed(context, AppRouter.reservations);}
        },
        destinations: const [
          NavigationDestination(icon: Icon(Icons.search), label: 'Explore'),
          NavigationDestination(icon: Icon(Icons.chat_bubble_outline), label: 'Rate'),
          NavigationDestination(icon: Icon(Icons.event_note_outlined), label: 'Reservations'),
        ],
      ),
    );
  }
}